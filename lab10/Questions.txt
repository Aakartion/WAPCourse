question 1: How many callbacks queues in Node.js and what are they? 
    Give examples to explain how different callbacks are enqueued in different queues
Ans: There are 6 queues in Node.js and they are:
        1. nextTick and Promise Queue
            nextTick and Promise callbacks queues are processed between each timer and immediate callbacks in node. 
            The callbacks that contains nextTick() and promise() will be pushed into this queue.

        2. Timer Queue
            Timer queue executes the callbacks scheduled by setTimeout() and setTimeInterval().

        3. I/O Queue:

        4. Polling Queue:
            retrieve new I/O events; execute I/O related callbacks (almost all with the exception 
            of close callbacks, the ones scheduled by timers, and setImmediate());
            node will block here when appropriate.

        5. Check Queue:
            In this queue, setImmediate() callbacks are invoked.

        6. Close Queue:
            callbacks: some close callbacks, e.g.socket.on('close', ...)

question 2: What's the output in the code below? Try to understand how it works as we explained in the class

                console.log('start');

                setTimeout(() => console.log('timeout 1'), 0);

                setTimeout(() => {

                    console.log('timeout 2')

                    process.nextTick(() => console.log('nextTick 3'));

                }, 0);

                setTimeout(() => console.log('timeout 3'), 0);

                new Promise((resolve, reject) => resolve('Hello')).then(() => console.log('Promise...1'));

                new Promise((resolve, reject) => resolve('Hello')).then(() => console.log('Promise...2'));

                process.nextTick(() =>  console.log('nextTick 1'));

                process.nextTick(() =>  console.log('nextTick 2'));

                console.log('end');

            Ans: output:
                start
                end
                nextTick 1
                nextTick 2
                Promise...1
                Promise...2
                timeout 1
                timeout 2
                nextTick 3
                timeout 3




question 3: What's the output of the code below? Try to understand how it works as we explained in the class.

            const fs = require('fs');


            fs.readFile('hello.txt', () => {

                console.log('readFile....');

            });

            setTimeout(() => console.log('timeout'), 0);

            setImmediate(() => console.log('Immediate'));


            And: output:
                    timeout
                    readFile....
                    Immediate




question 4: What's the output of the code below when running in Node.js? 
            If for the same code running in browser, what's the output? Why is the output different?

            var message = 'Hello World';

            function logMessage() {

                console.log(this.message);

            }

            logMessage();

        Ans: when we run the code in Node.js the output is "undefined" and the output running in the browser is "Hello World". The reason 
            for the different in the output is because of "this" keyword in different context.

            when we run the above code in Node.js, this "this" keyword inside the logMessage() refers to the global object. Since there is no
            `message` property in the global object, `this.message` evaluates to `undefined`.

            when we execute this code in browser, then 'this' keyword refers typically to the global object which is window in this case.
            And when the code runs in the browser, `this.message` would be equvalent to the `window.message`. 

            Generally speaking, In Node.js 'this' is the global object of the Node.js runtime, while in browser, 'this' is usually the 
            'window' object.


question 5: What will happen when execute the code below? If there's error, what's the error and what cause the error? 
            If no error, what's the output in the console? Assume pattern1.js and app.js are in the same folder

            // pattern1.js

            module.exports.getName = function () {

                console.log('Josh Edward');

            };


            // app.js

            const getName = require('./pattern1');


            getName();

        Ans:    When we execute above code, we get an error in line "getName()". This is beacuse, getName inside the app.js is not a function. It
                is a object that contain getName() function inside it. That's why when we execute the above code we get error saying "getName is not a 
                function". For the correct output we can execute the code by replacing the last line with "getName.getName()" because, getName() is the 
                property of getName object.



question 6: What will happen when execute the code below? If there's error, what's the error and what cause the error? 
            If no error, what's the output in the console? Assume pattern1.js and app.js are in the same folder

            // pattern1.js

            exports.getFirstname = function () {

                console.log('Josh');

            };

            exports = {

                getLastname: function(){

                    console.log('Edward');

                }

            }

            module.exports = function (){

                console.log('Josh Edward');

            }


            // app.js

            const getName = require('./pattern2');

            getName();


        Ans: There will be no error. And the output is "Josh Edward" because module.exports is changed to a function that is printing "Josh Edward".



question 7: What will happen when execute the code below? If there's error, what's the error and what cause the error? 
            If no error, what's the output in the console? Assume pattern1.js and app.js are in the same folder

            // pattern1.js

            exports.getFirstname = function () {

                console.log('Josh');

            };

            exports = {

                getLastname: function(){

                    console.log('Edward');

                }

            }

            module.exports.getFullname = function (){

                console.log('Josh Edward');

            }


            // app.js

            const {getFullname} = require('./pattern2');

            getFullname();

        Ans: There is no error on this code and the output is:
             "Josh Edward". 
